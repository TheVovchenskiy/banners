basePath: /api/v1
definitions:
  domain.Banner:
    properties:
      content:
        example: '{"title": "some_title", "text": "some_text", "url": "some_url"}'
        type: string
      createdAt:
        format: date-time
        type: string
      featureId:
        type: integer
      id:
        type: integer
      isActive:
        type: boolean
      tags:
        items:
          $ref: '#/definitions/domain.Tag'
        type: array
      updatedAt:
        format: date-time
        type: string
    type: object
  domain.Role:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  domain.Tag:
    properties:
      createdAt:
        format: date-time
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        format: date-time
        type: string
    type: object
  domain.User:
    properties:
      accessToken:
        type: string
      id:
        type: integer
      role:
        $ref: '#/definitions/domain.Role'
      username:
        type: string
    type: object
  serverErrors.APIError:
    properties:
      code:
        type: integer
      error: {}
    type: object
host: localhost:8080
info:
  contact:
    email: konoplyuk.v@yandex.ru
    name: Vladimir Konoplyuk
    url: https://github.com/TheVovchenskiy
  description: This is the first version of Banners API
  title: Banners API
  version: "1.0"
paths:
  /banners:
    get:
      description: Get all banners with filtering by feature and/or tag
      parameters:
      - description: Admin's token
        example: Bearer your_access_token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Feature's id
        in: query
        name: feature_id
        type: integer
      - description: Tags's id
        in: query
        name: tag_id
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: An array of banners
          schema:
            items:
              $ref: '#/definitions/domain.Banner'
            type: array
        "401":
          description: User is unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/serverErrors.APIError'
      summary: Handle getting list of banners
      tags:
      - banners
    post:
      consumes:
      - application/json
      description: Create new banner
      parameters:
      - description: Admin's token
        example: Bearer your_access_token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Ids of tags
        in: body
        name: tagIds
        required: true
        schema:
          items:
            type: integer
          type: array
      - description: Feature's id
        example: 1
        in: body
        name: featureId
        required: true
        schema:
          type: integer
      - description: Banner's content
        example: '"{\"title\": \"some_title\", \"text\": \"some_text\", \"url\": \"some_url\"}"'
        in: body
        name: content
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Created
          schema:
            $ref: '#/definitions/domain.Banner'
        "400":
          description: Internal server error
          schema:
            $ref: '#/definitions/serverErrors.APIError'
        "401":
          description: User is unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/serverErrors.APIError'
      summary: Handle creating new banner
      tags:
      - banners
  /register:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: Username
        in: body
        name: username
        required: true
        schema:
          type: string
      - description: User's password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: An object wtih new user's info
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/serverErrors.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/serverErrors.APIError'
      summary: Handle login
      tags:
      - auth
swagger: "2.0"
